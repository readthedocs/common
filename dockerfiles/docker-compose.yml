version: '3'

volumes:
  build-user-builds:
  storage_data:
  postgres_data:
  postgres_backups_data:

services:

  server:
    # Image used for all the other services (proxito, web, celery, build)
    build:
      context: ${PWD}
      dockerfile: ${PWD}/dockerfiles/Dockerfile

  nginx:
    image: nginx
    ports:
      - "80:80"
    links:
      - web
      - proxito
      - storage
    volumes:
      - ${PWD}/dockerfiles/nginx:/etc/nginx/conf.d

  proxito:
    volumes:
      - ${PWD}/common/dockerfiles/entrypoints/common.sh:/usr/src/app/docker/common.sh
      - ${PWD}/common/dockerfiles/entrypoints/proxito.sh:/usr/src/app/docker/proxito.sh
      - ${PWD}/${RTDDEV_PATH_EXT:-../readthedocs-ext}:/usr/src/app/checkouts/readthedocs-ext
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}:/usr/src/app/checkouts/ext-theme
    links:
      - storage
      - database
      - cache
    environment:
      - DOCKER_NO_RELOAD

    # Allow us to run `docker attach readthedocsorg_proxito_1` and get
    # control on STDIN and be able to debug our code with interactive pdb
    stdin_open: true
    tty: true

    networks:
      readthedocs:
    command: ["../../docker/proxito.sh"]

  web:
    volumes:
      - ${PWD}/common/dockerfiles/scripts/createsuperuser.py:/usr/src/app/docker/createsuperuser.py
      - ${PWD}/common/dockerfiles/entrypoints/common.sh:/usr/src/app/docker/common.sh
      - ${PWD}/common/dockerfiles/entrypoints/web.sh:/usr/src/app/docker/web.sh
      - ${PWD}/${RTDDEV_PATH_EXT:-../readthedocs-ext}:/usr/src/app/checkouts/readthedocs-ext
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}:/usr/src/app/checkouts/ext-theme
    links:
      - storage
      - database
      - cache
    depends_on:
      - storage
    environment:
      - INIT=${INIT:-}
      - DOCKER_NO_RELOAD
      - RTD_EXT_THEME_ENABLED
      - RTD_EXT_THEME_DEV_SERVER_ENABLED
    stdin_open: true
    tty: true
    networks:
      readthedocs:
    command: ["../../docker/web.sh"]

  celery:
    volumes:
      - ${PWD}/common/dockerfiles/entrypoints/common.sh:/usr/src/app/docker/common.sh
      - ${PWD}/common/dockerfiles/entrypoints/celery.sh:/usr/src/app/docker/celery.sh
      - ${PWD}/common/dockerfiles/scripts/wait_for_search.py:/usr/src/app/docker/scripts/wait_for_search.py
      - ${PWD}/${RTDDEV_PATH_EXT:-../readthedocs-ext}:/usr/src/app/checkouts/readthedocs-ext
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}:/usr/src/app/checkouts/ext-theme
    links:
      - storage
      - database
      - cache
    depends_on:
      - storage
    environment:
      # If COLUMNS is not defined Celery fails at startup
      # https://github.com/celery/celery/issues/5761
      - COLUMNS=80
      - DOCKER_NO_RELOAD
    stdin_open: true
    tty: true
    networks:
      readthedocs:
    command: ["../../docker/celery.sh"]

  build:
    volumes:
      - ${PWD}/common/dockerfiles/entrypoints/common.sh:/usr/src/app/docker/common.sh
      - ${PWD}/common/dockerfiles/entrypoints/build.sh:/usr/src/app/docker/build.sh
      - ${PWD}/${RTDDEV_PATH_EXT:-../readthedocs-ext}:/usr/src/app/checkouts/readthedocs-ext
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}:/usr/src/app/checkouts/ext-theme

      # The python code at readthedocs/doc_builder/environments.py
      # mounts `self.project.doc_path`. We need to share this path
      # between the build container (git commands), and the container that
      # is created inside the build container (sphinx commands).
      # Because of this, we need to use a shared volume between them
      - build-user-builds:/usr/src/app/checkouts/readthedocs.org/user_builds

      # Docker in Docker
      - /var/run/docker.sock:/var/run/docker.sock
    links:
      - web
      - storage
      - cache
    environment:
      # If COLUMNS is not defined Celery fails at startup
      # https://github.com/celery/celery/issues/5761
      - COLUMNS=80
      - DOCKER_NO_RELOAD
    stdin_open: true
    tty: true
    networks:
      readthedocs:
    command: ["../../docker/build.sh"]

  cache:
    image: redis:6.0.5
    networks:
      readthedocs:

  database:
    image: postgres:12.5
    environment:
      - POSTGRES_USER=docs_user
      - POSTGRES_PASSWORD=docs_pwd
      - POSTGRES_DB=docs_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups_data:/backups
    networks:
      readthedocs:

  storage:
    image: minio/minio
    ports:
      - "9000:9000"
    environment:
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=password
    volumes:
      - storage_data:/data
    networks:
      readthedocs:
    command: ["server", "/data"]
