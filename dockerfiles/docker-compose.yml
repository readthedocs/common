volumes:
  build-user-builds:
  storage_data:
  postgres_data_16:
  postgres_backups_data:

services:

  server:
    # Image used for all the other services (proxito, web, celery, build)
    build:
      context: ${PWD}
      dockerfile: ${PWD}/dockerfiles/Dockerfile
      args:
        PRUNE_PYTHON_PACKAGE_CACHE: ${PRUNE_PYTHON_PACKAGE_CACHE:-0}

  nginx:
    stop_grace_period: 1s
    image: nginx:1.22
    ports:
      - "80:80"
    links:
      - web
      - proxito
      - storage
      - wrangler
    networks:
      readthedocs:
    volumes:
      - ${PWD}/dockerfiles/nginx:/etc/nginx/templates
    # Disable logs for NGINX by default because they are too noisy and we have
    # better logs in our application code
    logging:
      driver: "none"

  wrangler:
    stop_grace_period: 1s
    build:
      context: ${PWD}/common/packages/addons-inject/
      dockerfile: ${PWD}/common/packages/addons-inject/Dockerfile
    volumes:
      - ${PWD}/common/packages/addons-inject/index.js:/usr/src/app/packages/addons-inject/index.js
      - ${PWD}/common/packages/addons-inject/wrangler.toml:/usr/src/app/packages/addons-inject/wrangler.toml
    networks:
      readthedocs:
    working_dir: /usr/src/app/packages/addons-inject/
    command: [
      "node_modules/.bin/wrangler",
      "dev",
      "--log-level=info",
      "--host=nginx:8080",  # El Proxito on NGINX configuration
      "--ip=0.0.0.0",
      "--port=8000",
    ]

  addons:
    stop_grace_period: 1s
    build:
      context: ${PWD}/${RTDDEV_PATH_ADDONS:-../addons}
      dockerfile: ${PWD}/common/dockerfiles/Dockerfile.addons
    networks:
      readthedocs:
    volumes:
      - ${PWD}/${RTDDEV_PATH_ADDONS:-../addons}/src/:/usr/src/app/checkouts/addons/src/
      - ${PWD}/${RTDDEV_PATH_ADDONS:-../addons}/package.json/:/usr/src/app/checkouts/addons/package.json
      - ${PWD}/${RTDDEV_PATH_ADDONS:-../addons}/package-lock.json/:/usr/src/app/checkouts/addons/package-lock.json
      - ${PWD}/${RTDDEV_PATH_ADDONS:-../addons}/webpack.config.js/:/usr/src/app/checkouts/addons/webpack.config.js
    tty: true
    working_dir: /usr/src/app/checkouts/addons/
    ports:
      - "8000:8000"
    command: [
      "npm",
      "run",
      "dev",
    ]

  proxito:
    stop_grace_period: 1s
    volumes:
      - ${PWD}/common/dockerfiles/entrypoints/common.sh:/usr/src/app/docker/common.sh
      - ${PWD}/common/dockerfiles/entrypoints/proxito.sh:/usr/src/app/docker/proxito.sh
      - ${PWD}/${RTDDEV_PATH_EXT:-../readthedocs-ext}:/usr/src/app/checkouts/readthedocs-ext
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}:/usr/src/app/checkouts/ext-theme
      - ${PWD}/common/dockerfiles/nodemon.json:/usr/src/app/checkouts/nodemon.json
    links:
      - storage
      - database
      - cache
    environment:
      - DOCKER_NO_RELOAD
      - RTD_USE_PROMOS
      - RTD_PRODUCTION_DOMAIN
      - RTD_PUBLIC_DOMAIN
      - RTD_LOGGING_LEVEL
      - RTD_DJANGO_DEBUG
      - RTD_EXT_THEME_DEV_SERVER_ENABLED
      - RTD_FILETREEDIFF_ALL
      # AWS related settings.
      - RTD_S3_PROVIDER
      - RTD_AWS_ACCESS_KEY_ID
      - RTD_AWS_SECRET_ACCESS_KEY
      - RTD_AWS_STS_ASSUME_ROLE_ARN
      - RTD_S3_MEDIA_STORAGE_BUCKET
      - RTD_S3_BUILD_COMMANDS_STORAGE_BUCKET
      - RTD_S3_BUILD_TOOLS_STORAGE_BUCKET
      - RTD_S3_STATIC_STORAGE_BUCKET
      - RTD_AWS_S3_REGION_NAME

    # Allow us to run `docker attach readthedocsorg_proxito_1` and get
    # control on STDIN and be able to debug our code with interactive pdb
    stdin_open: true
    tty: true

    networks:
      readthedocs:
    command: ["../../docker/proxito.sh"]

  web:
    stop_grace_period: 1s
    volumes:
      - ${PWD}/common/dockerfiles/scripts/createsuperuser.py:/usr/src/app/docker/createsuperuser.py
      - ${PWD}/common/dockerfiles/entrypoints/common.sh:/usr/src/app/docker/common.sh
      - ${PWD}/common/dockerfiles/entrypoints/web.sh:/usr/src/app/docker/web.sh
      - ${PWD}/common/dockerfiles/entrypoints/createbuckets.sh:/usr/src/app/docker/createbuckets.sh
      - ${PWD}/common/dockerfiles/entrypoints/wait-for-it.sh:/usr/src/app/docker/wait-for-it.sh
      - ${PWD}/common/dockerfiles/nodemon.json:/usr/src/app/checkouts/nodemon.json
      - ${PWD}/${RTDDEV_PATH_EXT:-../readthedocs-ext}:/usr/src/app/checkouts/readthedocs-ext
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}:/usr/src/app/checkouts/ext-theme
    links:
      - storage
      - database
      - cache
    depends_on:
      - storage
    environment:
      - INIT=${INIT:-}
      - DOCKER_NO_RELOAD
      - RTD_EXT_THEME_DEV_SERVER_ENABLED
      - RTD_PRODUCTION_DOMAIN
      - RTD_PUBLIC_DOMAIN
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - RTD_LOGGING_LEVEL
      - RTD_DJANGO_DEBUG
      - RTD_STRIPE_SECRET
      - RTD_STRIPE_PUBLISHABLE
      - RTD_DJSTRIPE_WEBHOOK_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_GITHUB_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_GITHUB_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_GITHUBAPP_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_GITHUBAPP_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_GITLAB_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_GITLAB_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_BITBUCKET_OAUTH2_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_BITBUCKET_OAUTH2_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_GOOGLE_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_GOOGLE_SECRET
      - RTD_FILETREEDIFF_ALL
      # AWS related settings.
      - RTD_S3_PROVIDER
      - RTD_AWS_ACCESS_KEY_ID
      - RTD_AWS_SECRET_ACCESS_KEY
      - RTD_AWS_STS_ASSUME_ROLE_ARN
      - RTD_S3_MEDIA_STORAGE_BUCKET
      - RTD_S3_BUILD_COMMANDS_STORAGE_BUCKET
      - RTD_S3_BUILD_TOOLS_STORAGE_BUCKET
      - RTD_S3_STATIC_STORAGE_BUCKET
      - RTD_AWS_S3_REGION_NAME
    stdin_open: true
    tty: true
    networks:
      readthedocs:
    command: ["../../docker/wait-for-it.sh", "database:5432", "--timeout=60", "--strict", "--", "../../docker/web.sh"]

  webpack:
    build:
      context: ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}
      dockerfile: ${PWD}/common/dockerfiles/Dockerfile.webpack
    working_dir: /usr/src/app/checkouts/ext-theme
    ports:
      - "10001:10001"
    volumes:
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}/src:/usr/src/app/checkouts/ext-theme/src
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}/readthedocsext:/usr/src/app/checkouts/ext-theme/readthedocsext
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}/packages.json:/usr/src/app/checkouts/ext-theme/packages.json
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}/packages-lock.json:/usr/src/app/checkouts/ext-theme/packages-lock.json
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}/webpack.config.mjs:/usr/src/app/checkouts/ext-theme/webpack.config.mjs
    environment:
      - INIT=${INIT:-}
      - DOCKER_NO_RELOAD
      - NODE_ENV=development
      - RTD_EXT_THEME_DEV_SERVER_ENABLED
    stdin_open: true
    tty: true
    networks:
      readthedocs:
    command: [
      "./node_modules/.bin/webpack-dev-server",
      "--mode=development",
      "--host=0.0.0.0",
      "--port=10001",
    ]

  celery:
    stop_grace_period: 1s
    volumes:
      - ${PWD}/common/dockerfiles/entrypoints/common.sh:/usr/src/app/docker/common.sh
      - ${PWD}/common/dockerfiles/entrypoints/celery.sh:/usr/src/app/docker/celery.sh
      - ${PWD}/common/dockerfiles/entrypoints/wait-for-it.sh:/usr/src/app/docker/wait-for-it.sh
      - ${PWD}/common/dockerfiles/nodemon.json:/usr/src/app/checkouts/nodemon.json
      - ${PWD}/${RTDDEV_PATH_EXT:-../readthedocs-ext}:/usr/src/app/checkouts/readthedocs-ext
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}:/usr/src/app/checkouts/ext-theme
    links:
      - storage
      - database
      - cache
    depends_on:
      - storage
    environment:
      # If COLUMNS is not defined Celery fails at startup
      # https://github.com/celery/celery/issues/5761
      - COLUMNS=80
      - DOCKER_NO_RELOAD
      - CELERY_LOG_LEVEL=${CELERY_LOG_LEVEL:-INFO}
      - RTD_PRODUCTION_DOMAIN
      - RTD_PUBLIC_DOMAIN
      - RTD_LOGGING_LEVEL
      - RTD_DJANGO_DEBUG
      - RTD_SOCIALACCOUNT_PROVIDERS_GITHUB_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_GITHUB_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_GITHUBAPP_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_GITHUBAPP_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_GITLAB_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_GITLAB_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_BITBUCKET_OAUTH2_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_BITBUCKET_OAUTH2_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_GOOGLE_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_GOOGLE_SECRET
      - RTD_FILETREEDIFF_ALL
      # AWS related settings.
      - RTD_S3_PROVIDER
      - RTD_AWS_ACCESS_KEY_ID
      - RTD_AWS_SECRET_ACCESS_KEY
      - RTD_AWS_STS_ASSUME_ROLE_ARN
      - RTD_S3_MEDIA_STORAGE_BUCKET
      - RTD_S3_BUILD_COMMANDS_STORAGE_BUCKET
      - RTD_S3_BUILD_TOOLS_STORAGE_BUCKET
      - RTD_S3_STATIC_STORAGE_BUCKET
      - RTD_AWS_S3_REGION_NAME
    stdin_open: true
    tty: true
    networks:
      readthedocs:
    command: ["../../docker/celery.sh"]

  celery-beat:
    stop_grace_period: 1s
    volumes:
      - ${PWD}/common/dockerfiles/entrypoints/common.sh:/usr/src/app/docker/common.sh
      - ${PWD}/common/dockerfiles/entrypoints/celery-beat.sh:/usr/src/app/docker/celery-beat.sh
      - ${PWD}/common/dockerfiles/nodemon.json:/usr/src/app/checkouts/nodemon.json
      - ${PWD}/${RTDDEV_PATH_EXT:-../readthedocs-ext}:/usr/src/app/checkouts/readthedocs-ext
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}:/usr/src/app/checkouts/ext-theme
    links:
      - cache
    environment:
      - DOCKER_NO_RELOAD
      - CELERY_LOG_LEVEL=${CELERY_LOG_LEVEL:-INFO}
      - RTD_PRODUCTION_DOMAIN
      - RTD_PUBLIC_DOMAIN
      - RTD_LOGGING_LEVEL
      - RTD_DJANGO_DEBUG
      - RTD_SOCIALACCOUNT_PROVIDERS_GITHUB_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_GITHUB_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_GITHUBAPP_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_GITHUBAPP_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_GITLAB_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_GITLAB_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_BITBUCKET_OAUTH2_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_BITBUCKET_OAUTH2_SECRET
      - RTD_SOCIALACCOUNT_PROVIDERS_GOOGLE_CLIENT_ID
      - RTD_SOCIALACCOUNT_PROVIDERS_GOOGLE_SECRET
      - RTD_FILETREEDIFF_ALL
      # AWS related settings.
      - RTD_S3_PROVIDER
      - RTD_AWS_ACCESS_KEY_ID
      - RTD_AWS_SECRET_ACCESS_KEY
      - RTD_AWS_STS_ASSUME_ROLE_ARN
      - RTD_S3_MEDIA_STORAGE_BUCKET
      - RTD_S3_BUILD_COMMANDS_STORAGE_BUCKET
      - RTD_S3_BUILD_TOOLS_STORAGE_BUCKET
      - RTD_S3_STATIC_STORAGE_BUCKET
      - RTD_AWS_S3_REGION_NAME
    stdin_open: true
    tty: true
    networks:
      readthedocs:
    command: ["../../docker/celery-beat.sh"]

  build:
    stop_grace_period: 1s
    volumes:
      - ${PWD}/common/dockerfiles/entrypoints/common.sh:/usr/src/app/docker/common.sh
      - ${PWD}/common/dockerfiles/entrypoints/build.sh:/usr/src/app/docker/build.sh
      - ${PWD}/common/dockerfiles/nodemon.json:/usr/src/app/checkouts/nodemon.json
      - ${PWD}/${RTDDEV_PATH_EXT:-../readthedocs-ext}:/usr/src/app/checkouts/readthedocs-ext
      - ${PWD}/${RTDDEV_PATH_EXT_THEME:-../ext-theme}:/usr/src/app/checkouts/ext-theme

      # The python code at readthedocs/doc_builder/environments.py
      # mounts `self.project.doc_path`. We need to share this path
      # between the build container (git commands), and the container that
      # is created inside the build container (sphinx commands).
      # Because of this, we need to use a shared volume between them
      - build-user-builds:/usr/src/app/checkouts/readthedocs.org/user_builds

      # Docker in Docker
      - /var/run/docker.sock:/var/run/docker.sock
    links:
      - web
      - storage
      - cache
    environment:
      # If COLUMNS is not defined Celery fails at startup
      # https://github.com/celery/celery/issues/5761
      - COLUMNS=80
      - DOCKER_NO_RELOAD
      - CELERY_LOG_LEVEL=${CELERY_LOG_LEVEL:-INFO}
      - RTD_PRODUCTION_DOMAIN
      - RTD_PUBLIC_DOMAIN
      - RTD_LOGGING_LEVEL
      - RTD_DJANGO_DEBUG
      - RTD_FILETREEDIFF_ALL
      # TODO: remove these from here, as builders should not
      # need to have these settings.
      # AWS related settings.
      - RTD_S3_PROVIDER
      - RTD_AWS_ACCESS_KEY_ID
      - RTD_AWS_SECRET_ACCESS_KEY
      - RTD_AWS_STS_ASSUME_ROLE_ARN
      - RTD_S3_MEDIA_STORAGE_BUCKET
      - RTD_S3_BUILD_COMMANDS_STORAGE_BUCKET
      - RTD_S3_BUILD_TOOLS_STORAGE_BUCKET
      - RTD_S3_STATIC_STORAGE_BUCKET
      - RTD_AWS_S3_REGION_NAME
    stdin_open: true
    tty: true
    networks:
      readthedocs:
    command: ["../../docker/build.sh"]

  cache:
    image: redis:6.2.6  # Match production version
    command: >
          --requirepass "redispassword"
    networks:
      readthedocs:

  database:
    image: postgres:16.3
    environment:
      - POSTGRES_USER=docs_user
      - POSTGRES_PASSWORD=docs_pwd
      - POSTGRES_DB=docs_db
    volumes:
      - ${PWD}/common/dockerfiles/entrypoints/postgres.sql:/docker-entrypoint-initdb.d/postgres.sql
      - postgres_data_16:/var/lib/postgresql/data
      - postgres_backups_data:/backups
    networks:
      readthedocs:

  storage:
    image: minio/minio:RELEASE.2022-02-24T22-12-01Z.fips
    ports:
      - "9000:9000"
      - "9009:9009"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
    volumes:
      - storage_data:/data
    networks:
      readthedocs:
    command: ["server", "--console-address", ":9009", "/data"]
